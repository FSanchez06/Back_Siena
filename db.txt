CREATE DATABASE siena;
USE siena;

-- creacion tablas 
CREATE TABLE Rol (
	ID_Rol INT PRIMARY KEY,
    TipoRol VARCHAR(30)
);

SELECT * FROM Rol;

-- tabla usuario
CREATE TABLE Usuario (
    ID_Usuario INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(250),
    Email VARCHAR(250) UNIQUE,
    Contraseña VARCHAR(300),
    Telefono VARCHAR(10),
    Ciudad VARCHAR(150),
    CodPostal INT(6),
    Direccion VARCHAR(250),
    Estado ENUM('Activo', 'Inactivo') DEFAULT 'Activo',
    FotoPerfil VARCHAR(300),
    PublicId VARCHAR(255),
    ID_Rol INT,
    FOREIGN KEY (ID_Rol) REFERENCES Rol(ID_Rol) ON DELETE SET NULL
);

SELECT * FROM Usuario;

-- tabla banners 
CREATE TABLE Banners (
	ID_Banner INT PRIMARY KEY AUTO_INCREMENT,
    ImgBanner VARCHAR(300),
    PublicId VARCHAR(250),
    ID_Usuario INT,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE CASCADE
);
SELECT * FROM Banners;


-- tabla Images para el Home
CREATE TABLE Images (
	ID_Image INT PRIMARY KEY AUTO_INCREMENT,
    ImageHome VARCHAR(300),
    PublicId VARCHAR(250),
    ID_Usuario INT,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE CASCADE
);

SELECT * FROM Images;

-- tabla Productos
CREATE TABLE Productos (
	ID_Producto INT PRIMARY KEY AUTO_INCREMENT,
    ImgProducto VARCHAR(300),
    PublicId VARCHAR(250),
    NombreProducto VARCHAR(150),
    PrecioProducto DECIMAL(15, 2),
    Color VARCHAR(40),
    Insignia BOOLEAN DEFAULT 1,
    Descripcion VARCHAR(350),
    Estado ENUM('Disponible', 'Agotado', 'En Reposición', 'Descontinuado') DEFAULT 'Disponible',
    StockDisponible INT DEFAULT 0, -- Nueva columna para la cantidad disponible
    StockMinimo INT DEFAULT 10, -- Nueva columna para el stock mínimo
    ID_Usuario INT,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE CASCADE
);

SELECT * FROM Productos;

-- tabla Mensajes
CREATE TABLE Mensajes (
	ID_mensaje INT PRIMARY KEY AUTO_INCREMENT,
    NombreUsuario VARCHAR(200),
    EmailUsuario VARCHAR(200),
    Mensaje TEXT,
    ID_Usuario INT,
    Respuesta TEXT,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE CASCADE
);
SELECT * FROM Mensajes;

-- tabla MetodoPago
CREATE TABLE MetodoPago (
    ID_MetodoPago INT AUTO_INCREMENT PRIMARY KEY,
    Nombre VARCHAR(100) NOT NULL,
    Descripcion VARCHAR(255),
    FechaCreacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

SELECT * FROM MetodoPago;

-- Crear la tabla Pedidos
CREATE TABLE Pedidos (
    ID_Pedido INT AUTO_INCREMENT PRIMARY KEY,
    ID_Usuario INT NOT NULL,
    ID_MetodoPago INT NULL,
    FechaPedido TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Total DECIMAL(10, 2) NOT NULL,
    Estado ENUM('Por pagar', 'Pagado', 'Cancelado', 'Pago contra entrega') NOT NULL DEFAULT 'Por pagar',
    FechaEntrega TIMESTAMP NULL,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario),
    FOREIGN KEY (ID_MetodoPago) REFERENCES MetodoPago(ID_MetodoPago)
);
SELECT * FROM Pedidos;

-- tabla DetallesPedido
CREATE TABLE DetallesPedido (
    ID_Detalle INT PRIMARY KEY AUTO_INCREMENT,
    ID_Pedido INT,
    ID_Producto INT,
    Cantidad INT,
    PrecioUnitario DECIMAL(15, 2),
    Subtotal DECIMAL(15, 2) AS (Cantidad * PrecioUnitario) STORED,
    FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido) ON DELETE CASCADE,
    FOREIGN KEY (ID_Producto) REFERENCES Productos(ID_Producto) ON DELETE SET NULL
);

	SELECT * FROM DetallesPedido;

-- tabla Ventas
CREATE TABLE Ventas (
    ID_Venta INT PRIMARY KEY AUTO_INCREMENT,
    FechaVenta DATETIME DEFAULT CURRENT_TIMESTAMP,
    ID_Pedido INT,
    ID_Detalle INT,
    TotalVenta DECIMAL(15, 2),
    Estado ENUM('En proceso', 'Enviando', 'Entregado', 'Cancelada', 'Reembolsada') DEFAULT 'En proceso',
    ID_Usuario INT,
    FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido) ON DELETE CASCADE,
    FOREIGN KEY (ID_Detalle) REFERENCES DetallesPedido(ID_Detalle) ON DELETE SET NULL,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE SET NULL
);

SELECT * FROM Ventas;

 -- Reemplaza '1' con el ID del cliente

-- tabla DisenosPersonalizados
CREATE TABLE DisenosPersonalizados (
    ID_Disenio INT PRIMARY KEY AUTO_INCREMENT,
    ID_Usuario INT,
    NombreDisenio VARCHAR(150),
    Descripcion TEXT,
    FechaCreacion DATETIME DEFAULT CURRENT_TIMESTAMP,
    Estado ENUM('Pendiente', 'Aprobado', 'Rechazado', 'En Producción', 'Finalizado') DEFAULT 'Pendiente',
    Modelo3DURL VARCHAR(300),
    PublicId VARCHAR(255),
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE SET NULL
);

SELECT * FROM DisenosPersonalizados;

-- gestion: 
-- voy aqui
CREATE TABLE HistorialPedidos (
    IdHistorialPedido INT AUTO_INCREMENT PRIMARY KEY,
    ID_Pedido INT NOT NULL,
    ID_Usuario INT NOT NULL,
    FechaPedido DATETIME NOT NULL,
    FechaEntrega DATETIME NOT NULL,
    EstadoPedido ENUM('Pendiente', 'Enviado', 'Entregado', 'Cancelado') DEFAULT 'Pendiente',
    Total DECIMAL(10, 2) NOT NULL,
    Observaciones VARCHAR(255),
    FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido) ON DELETE CASCADE,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE CASCADE
);

SELECT * FROM HistorialPedidos;

CREATE TABLE HistorialDetallesPedido (
    IdHistorialDetalle INT AUTO_INCREMENT PRIMARY KEY,
    IdHistorialPedido INT NOT NULL,
    ID_Producto INT NOT NULL,
    Cantidad INT NOT NULL,
    Subtotal DECIMAL(10, 2) NOT NULL,
    PrecioUnitario DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (IdHistorialPedido) REFERENCES HistorialPedidos(IdHistorialPedido) ON DELETE CASCADE,
    FOREIGN KEY (ID_Producto) REFERENCES Productos(ID_Producto) ON DELETE CASCADE
);

SELECT * FROM HistorialDetallesPedido;

CREATE TABLE HistorialVentas (
    IdHistorialVenta INT AUTO_INCREMENT PRIMARY KEY,
    ID_Pedido INT NOT NULL,
    ID_Usuario INT NOT NULL,
    ID_MetodoPago INT NOT NULL,
    FechaVenta DATETIME NOT NULL,
    TotalVenta DECIMAL(10, 2) NOT NULL,
    EstadoVenta ENUM('Completada', 'Reembolsada', 'Cancelada') DEFAULT 'Completada',
    Notas VARCHAR(255),
    FOREIGN KEY (ID_Pedido) REFERENCES Pedidos(ID_Pedido) ON DELETE CASCADE,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE CASCADE,
    FOREIGN KEY (ID_MetodoPago) REFERENCES MetodoPago(ID_MetodoPago) ON DELETE CASCADE
);

SELECT * FROM HistorialVentas;

CREATE TABLE HistorialDetallesVenta (
    IdHistorialDetalleVenta INT AUTO_INCREMENT PRIMARY KEY,
    IdHistorialVenta INT NOT NULL,
    ID_Producto INT NOT NULL,
    Cantidad INT NOT NULL,
    PrecioUnitario DECIMAL(10, 2) NOT NULL,
    Subtotal DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (IdHistorialVenta) REFERENCES HistorialVentas(IdHistorialVenta) ON DELETE CASCADE,
    FOREIGN KEY (ID_Producto) REFERENCES Productos(ID_Producto) ON DELETE CASCADE
);

SELECT * FROM HistorialDetallesVenta;

CREATE TABLE HistorialStock (
    ID_Historial INT PRIMARY KEY AUTO_INCREMENT,
    ID_Producto INT NOT NULL,
    Cambio VARCHAR(255), -- Ej. "Reducción por venta", "Incremento por reposición"
    Cantidad INT,
    FechaCambio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ID_Usuario INT, -- Usuario que realizó el cambio (puede ser nulo si es automático)
    FOREIGN KEY (ID_Producto) REFERENCES Productos(ID_Producto) ON DELETE CASCADE,
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario) ON DELETE SET NULL
);

SELECT * FROM HistorialStock;

-- funciones necesarias:

DELIMITER $$

CREATE TRIGGER AfterPedidoUpdatePago
AFTER UPDATE ON Pedidos
FOR EACH ROW
BEGIN
    -- Verificar si el estado del pedido ha cambiado a "Pagado" o "Pago contra entrega"
    IF NEW.Estado IN ('Pagado', 'Pago contra entrega') AND OLD.Estado != NEW.Estado THEN
        -- Insertar un registro en Ventas con el total del pedido
        INSERT INTO Ventas (ID_Pedido, TotalVenta, Estado, ID_Usuario)
        VALUES (NEW.ID_Pedido, NEW.Total, 'En proceso', NEW.ID_Usuario);
    END IF;
END$$

DELIMITER ;


DELIMITER $$
CREATE TRIGGER AfterStockUpdate
AFTER UPDATE ON Productos
FOR EACH ROW
BEGIN
    IF NEW.StockDisponible != OLD.StockDisponible THEN
        INSERT INTO HistorialStock (ID_Producto, Cambio, Cantidad, FechaCambio, ID_Usuario)
        VALUES (NEW.ID_Producto, 
                'Actualización de Stock', 
                NEW.StockDisponible - OLD.StockDisponible, 
                NOW(), 
                NULL); -- Usuario puede ser null si es automático
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterPedidoInsertOrUpdate
AFTER INSERT ON Pedidos
FOR EACH ROW
BEGIN
    -- Insertar un registro en HistorialPedidos al crear un pedido, usando el total de Pedidos
    INSERT INTO HistorialPedidos (ID_Pedido, ID_Usuario, FechaPedido, FechaEntrega, EstadoPedido, Total, Observaciones)
    VALUES (NEW.ID_Pedido, 
            NEW.ID_Usuario, 
            NEW.FechaPedido, 
            NEW.FechaEntrega, 
            NEW.Estado, 
            NEW.Total,  -- Obtiene el total directamente del pedido
            NULL);
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterPedidoUpdateTotal
AFTER UPDATE ON Pedidos
FOR EACH ROW
BEGIN
    IF NEW.Total != OLD.Total THEN
        -- Actualiza el total en HistorialPedidos si cambia en Pedidos
        UPDATE HistorialPedidos
        SET Total = NEW.Total
        WHERE ID_Pedido = NEW.ID_Pedido;
    END IF;
END$$
DELIMITER ;


DELIMITER $$
CREATE TRIGGER AfterDetallesPedidoInsert
AFTER INSERT ON DetallesPedido
FOR EACH ROW
BEGIN
    -- Insertar un registro en HistorialDetallesPedido por cada detalle del pedido
    INSERT INTO HistorialDetallesPedido (IdHistorialPedido, ID_Producto, Cantidad, Subtotal, PrecioUnitario)
    SELECT IdHistorialPedido, NEW.ID_Producto, NEW.Cantidad, NEW.Subtotal, NEW.PrecioUnitario
    FROM HistorialPedidos
    WHERE HistorialPedidos.ID_Pedido = NEW.ID_Pedido;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterPedidoUpdate
AFTER UPDATE ON Pedidos
FOR EACH ROW
BEGIN
    -- Actualizar el estado en HistorialPedidos si cambia en Pedidos
    UPDATE HistorialPedidos
    SET EstadoPedido = NEW.Estado, FechaEntrega = NEW.FechaEntrega
    WHERE ID_Pedido = NEW.ID_Pedido;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterPedidoCancel
AFTER UPDATE ON Pedidos
FOR EACH ROW
BEGIN
    IF NEW.Estado = 'Cancelado' THEN
        -- Agregar una observación en HistorialPedidos al cancelar un pedido
        UPDATE HistorialPedidos
        SET Observaciones = 'Pedido cancelado por el usuario'
        WHERE ID_Pedido = NEW.ID_Pedido;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterDetallesPedidoDelete
AFTER DELETE ON DetallesPedido
FOR EACH ROW
BEGIN
    -- Actualizar HistorialDetallesPedido para reflejar la eliminación
    DELETE FROM HistorialDetallesPedido
    WHERE ID_Producto = OLD.ID_Producto AND IdHistorialPedido IN (
        SELECT IdHistorialPedido FROM HistorialPedidos WHERE ID_Pedido = OLD.ID_Pedido
    );
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterVentaInsert
AFTER INSERT ON Ventas
FOR EACH ROW
BEGIN
    INSERT INTO HistorialVentas (ID_Pedido, ID_Usuario, ID_MetodoPago, FechaVenta, TotalVenta, EstadoVenta, Notas)
    VALUES (NEW.ID_Pedido, NEW.ID_Usuario, 
            (SELECT ID_MetodoPago FROM Pedidos WHERE ID_Pedido = NEW.ID_Pedido), 
            NEW.FechaVenta, NEW.TotalVenta, NEW.Estado, NULL);
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterVentaUpdate
AFTER UPDATE ON Ventas
FOR EACH ROW
BEGIN
    UPDATE HistorialVentas
    SET EstadoVenta = NEW.Estado, Notas = 'Estado actualizado automáticamente'
    WHERE ID_Pedido = NEW.ID_Pedido;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterDetalleVentaInsert
AFTER INSERT ON DetallesPedido
FOR EACH ROW
BEGIN
    INSERT INTO HistorialDetallesVenta (IdHistorialVenta, ID_Producto, Cantidad, PrecioUnitario, Subtotal)
    SELECT IdHistorialVenta, NEW.ID_Producto, NEW.Cantidad, NEW.PrecioUnitario, NEW.Subtotal
    FROM HistorialVentas
    WHERE HistorialVentas.ID_Pedido = NEW.ID_Pedido;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterDetalleVentaDelete
AFTER DELETE ON DetallesPedido
FOR EACH ROW
BEGIN
    DELETE FROM HistorialDetallesVenta
    WHERE ID_Producto = OLD.ID_Producto AND IdHistorialVenta IN (
        SELECT IdHistorialVenta FROM HistorialVentas WHERE ID_Pedido = OLD.ID_Pedido
    );
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AfterVentaCancel
AFTER UPDATE ON Ventas
FOR EACH ROW
BEGIN
    IF NEW.Estado IN ('Cancelada', 'Reembolsada') THEN
        UPDATE HistorialVentas
        SET Notas = CONCAT('Venta ', NEW.Estado, ' el ', NOW())
        WHERE ID_Pedido = NEW.ID_Pedido;
    END IF;
END$$
DELIMITER ;

DELIMITER $$

CREATE TRIGGER AfterVentaExitosa
AFTER INSERT ON Ventas
FOR EACH ROW
BEGIN
    -- Recorrer cada detalle asociado al pedido de la venta
    DECLARE done INT DEFAULT 0;
    DECLARE v_ID_Producto INT;
    DECLARE v_Cantidad INT;

    -- Cursor para iterar sobre los detalles del pedido asociado a la venta
    DECLARE detalles_cursor CURSOR FOR
        SELECT ID_Producto, Cantidad
        FROM DetallesPedido
        WHERE ID_Pedido = NEW.ID_Pedido;

    -- Manejar el fin del cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Abrir el cursor
    OPEN detalles_cursor;

    -- Iterar sobre los productos vendidos y actualizar el stock
    REPEAT
        FETCH detalles_cursor INTO v_ID_Producto, v_Cantidad;
        IF NOT done THEN
            UPDATE Productos
            SET StockDisponible = StockDisponible - v_Cantidad
            WHERE ID_Producto = v_ID_Producto;
        END IF;
    UNTIL done END REPEAT;

    -- Cerrar el cursor
    CLOSE detalles_cursor;
END$$

DELIMITER ;




